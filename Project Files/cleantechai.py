# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hS_8v2OFH49qMPqVi9QZYSGGwUkRt0Us
"""

# Cell 1: Install Dependencies
print("üîß Installing required packages...")

# Install main packages
!pip install streamlit transformers torch torchvision pillow accelerate -q
!pip install pyngrok -q

# Cell 2: Import Libraries
print("üìö Importing libraries...")

import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from PIL import Image
import io
import base64
import numpy as np
from datetime import datetime
import json
import threading
import subprocess
from pyngrok import ngrok

print("‚úÖ All libraries imported successfully!")
print(f"üî• PyTorch CUDA available: {torch.cuda.is_available()}")

# Cell 3: Create Application File
print("üìù Creating CleanTech application file...")

app_code = '''
import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from PIL import Image
import io
import base64
import numpy as np
from datetime import datetime
import json

# Configure page
st.set_page_config(
    page_title="CleanTech: AI Waste Management",
    page_icon="‚ôªÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for enhanced UI
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }

    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        border-left: 4px solid #4CAF50;
    }

    .waste-category {
        background: linear-gradient(45deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        font-weight: bold;
    }

    .metric-card {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        color: white;
        margin: 0.5rem;
    }

    .stButton > button {
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .analysis-result {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_granite_model():
    """Load IBM Granite model for waste management analysis"""
    try:
        model_name = "ibm-granite/granite-3.0-2b-instruct"
        st.info("ü§ñ Loading AI model... This may take a few minutes on first run.")
        tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            trust_remote_code=True
        )
        st.success("‚úÖ AI Model loaded successfully!")
        return model, tokenizer
    except Exception as e:
        st.error(f"‚ùå Error loading model: {str(e)}")
        st.info("üîÑ Using rule-based analysis instead.")
        return None, None

def analyze_waste_with_ai(description, image_data=None):
    """Analyze waste using IBM Granite model"""
    model, tokenizer = load_granite_model()

    if model is None or tokenizer is None:
        return "AI model not available. Using enhanced rule-based analysis for comprehensive waste assessment."

    prompt = f"""
    As an expert waste management AI system, analyze this waste item and provide:

    Waste Description: {description}

    Please provide:
    1. Primary waste category classification
    2. Specific recycling method recommendations
    3. Environmental impact assessment
    4. Step-by-step disposal instructions
    5. Sustainability score (1-10 scale)
    6. Alternative reuse suggestions

    Analysis:
    """

    try:
        inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

        with torch.no_grad():
            outputs = model.generate(
                inputs.input_ids,
                max_new_tokens=400,
                temperature=0.7,
                do_sample=True,
                pad_token_id=tokenizer.eos_token_id
            )

        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        return response.split("Analysis:")[-1].strip()

    except Exception as e:
        return f"AI processing encountered an issue: {str(e)}. Switching to rule-based analysis."

def classify_waste_type(description):
    """Enhanced rule-based waste classification"""
    waste_categories = {
        'organic': ['food', 'fruit', 'vegetable', 'garden', 'compost', 'bio', 'kitchen', 'scraps', 'peel', 'core'],
        'recyclable': ['plastic', 'glass', 'metal', 'paper', 'cardboard', 'bottle', 'can', 'container', 'aluminum'],
        'electronic': ['computer', 'phone', 'battery', 'electronic', 'circuit', 'device', 'laptop', 'tablet'],
        'hazardous': ['chemical', 'paint', 'solvent', 'medicine', 'toxic', 'bleach', 'pesticide', 'fluorescent'],
        'textile': ['cloth', 'fabric', 'clothing', 'textile', 'fiber', 'shirt', 'pants', 'shoes', 'cotton']
    }

    description_lower = description.lower()
    scores = {}

    for category, keywords in waste_categories.items():
        score = sum(1 for keyword in keywords if keyword in description_lower)
        if score > 0:
            scores[category] = score

    if scores:
        return max(scores, key=scores.get)
    return 'general'

def get_recycling_recommendations(waste_type):
    """Get detailed recycling recommendations"""
    recommendations = {
        'organic': {
            'method': 'Composting & Organic Processing',
            'steps': [
                'Separate organic waste from other materials',
                'Remove any non-organic items (stickers, ties)',
                'Use home compost bin or municipal organic collection',
                'Turn compost regularly for proper decomposition',
                'Use finished compost as natural fertilizer'
            ],
            'impact': 'Reduces methane emissions by 60% and creates nutrient-rich soil amendment',
            'sustainability_score': 9
        },
        'recyclable': {
            'method': 'Material Recovery & Reprocessing',
            'steps': [
                'Clean containers thoroughly (remove food residue)',
                'Sort by material type (plastic, glass, metal, paper)',
                'Check recycling codes and local guidelines',
                'Take to appropriate recycling center or curbside pickup',
                'Support circular economy by buying recycled products'
            ],
            'impact': 'Saves 70% energy compared to virgin material production',
            'sustainability_score': 8
        },
        'electronic': {
            'method': 'E-waste Specialized Processing',
            'steps': [
                'Backup and securely delete all personal data',
                'Remove batteries if possible',
                'Find certified e-waste recycling facility',
                'Ensure proper precious metal recovery',
                'Consider donation if device still functional'
            ],
            'impact': 'Recovers valuable materials and prevents toxic soil contamination',
            'sustainability_score': 7
        },
        'hazardous': {
            'method': 'Specialized Hazardous Waste Treatment',
            'steps': [
                'Never mix different chemical types',
                'Keep in original labeled containers',
                'Contact local hazmat disposal facility',
                'Follow all safety protocols during transport',
                'Consider safer alternatives for future use'
            ],
            'impact': 'Prevents groundwater contamination and ecosystem damage',
            'sustainability_score': 10
        },
        'textile': {
            'method': 'Textile Recovery & Upcycling',
            'steps': [
                'Assess condition - donate if still wearable',
                'Clean thoroughly before processing',
                'Separate by fabric type and color',
                'Use textile recycling programs or drop-off centers',
                'Consider creative upcycling projects'
            ],
            'impact': 'Reduces textile waste by 45% and saves water in production',
            'sustainability_score': 7
        },
        'general': {
            'method': 'Waste-to-Energy Recovery',
            'steps': [
                'Ensure proper sorting from recyclables',
                'Use municipal waste collection services',
                'Support waste-to-energy facilities when available',
                'Minimize packaging in future purchases',
                'Consider reusable alternatives'
            ],
            'impact': 'Generates renewable energy and reduces landfill burden',
            'sustainability_score': 5
        }
    }
    return recommendations.get(waste_type, recommendations['general'])

def calculate_environmental_impact(waste_type, quantity=1):
    """Calculate environmental impact metrics"""
    impact_factors = {
        'organic': {'co2_saved': 2.3, 'water_saved': 45, 'energy_saved': 12},
        'recyclable': {'co2_saved': 3.1, 'water_saved': 78, 'energy_saved': 28},
        'electronic': {'co2_saved': 15.2, 'water_saved': 234, 'energy_saved': 89},
        'hazardous': {'co2_saved': 8.7, 'water_saved': 123, 'energy_saved': 45},
        'textile': {'co2_saved': 5.4, 'water_saved': 167, 'energy_saved': 34},
        'general': {'co2_saved': 1.2, 'water_saved': 23, 'energy_saved': 8}
    }

    factors = impact_factors.get(waste_type, impact_factors['general'])
    return {
        'co2_saved': factors['co2_saved'] * quantity,
        'water_saved': factors['water_saved'] * quantity,
        'energy_saved': factors['energy_saved'] * quantity
    }

# Main Application Interface
def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>‚ôªÔ∏è CleanTech: AI-Powered Waste Management</h1>
        <p>Transforming waste management with IBM Granite AI and transfer learning</p>
        <p><em>Sustainable solutions for a cleaner tomorrow</em></p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.header("üîß Control Panel")

        # Model Status Check
        model, tokenizer = load_granite_model()
        model_status = "‚úÖ AI Connected" if model else "üîÑ Rule-Based Mode"
        st.metric("System Status", model_status)

        # Quick Stats
        st.subheader("üìä Session Impact")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Items Analyzed", st.session_state.get('items_analyzed', 0))
        with col2:
            st.metric("CO‚ÇÇ Saved", f"{st.session_state.get('co2_saved', 0):.1f} kg")

        # Settings
        st.subheader("‚öôÔ∏è Analysis Settings")
        analysis_detail = st.selectbox("Detail Level", ["Standard", "Detailed", "Expert"])
        show_impact = st.checkbox("Show Environmental Impact", True)
        auto_classify = st.checkbox("Auto-classify on input", True)

        # Reset button
        if st.button("üîÑ Reset Session Data"):
            for key in ['items_analyzed', 'co2_saved', 'water_saved', 'energy_saved']:
                st.session_state[key] = 0
            st.success("Session data reset!")

    # Initialize session state
    if 'items_analyzed' not in st.session_state:
        st.session_state.items_analyzed = 0
        st.session_state.co2_saved = 0
        st.session_state.water_saved = 0
        st.session_state.energy_saved = 0

    # Main Content Tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üîç Waste Analysis", "üìà Impact Dashboard", "üå± Sustainability Tracker", "üìö Education Hub"])

    with tab1:
        st.header("üîç Smart Waste Analysis")

        # Main analysis interface
        col1, col2 = st.columns([2, 1])

        with col1:
            # Input section
            st.subheader("üìù Describe Your Waste Item")

            input_method = st.radio(
                "Choose input method:",
                ["Text Description", "Upload Image", "Both Text & Image"],
                horizontal=True
            )

            waste_description = ""
            uploaded_image = None

            if input_method in ["Text Description", "Both Text & Image"]:
                waste_description = st.text_area(
                    "Detailed waste description:",
                    placeholder="Example: Large plastic water bottle with cap, clear PET plastic, 500ml size, empty and clean...",
                    height=120,
                    help="Be as specific as possible for better AI analysis"
                )

                # Auto-classify preview
                if auto_classify and waste_description:
                    preview_type = classify_waste_type(waste_description)
                    st.info(f"ü§ñ Auto-detected category: **{preview_type.title()}**")

            if input_method in ["Upload Image", "Both Text & Image"]:
                uploaded_image = st.file_uploader(
                    "Upload clear waste image:",
                    type=['png', 'jpg', 'jpeg', 'webp'],
                    help="Upload a well-lit, clear image of the waste item"
                )

                if uploaded_image:
                    image = Image.open(uploaded_image)
                    st.image(image, caption="Uploaded Image", width=400)

            # Quantity input
            quantity = st.number_input("Quantity (optional):", min_value=1, max_value=100, value=1)

            # Analysis button
            analyze_button = st.button("üöÄ Analyze Waste Item", type="primary", use_container_width=True)

            if analyze_button:
                if waste_description or uploaded_image:
                    with st.spinner("üîÑ AI is analyzing your waste item..."):
                        # Perform analysis
                        ai_analysis = analyze_waste_with_ai(waste_description)
                        waste_type = classify_waste_type(waste_description)
                        recommendations = get_recycling_recommendations(waste_type)
                        impact = calculate_environmental_impact(waste_type, quantity)

                        # Update session stats
                        st.session_state.items_analyzed += 1
                        st.session_state.co2_saved += impact['co2_saved']
                        st.session_state.water_saved += impact['water_saved']
                        st.session_state.energy_saved += impact['energy_saved']

                        # Display comprehensive results
                        st.markdown('<div class="analysis-result">', unsafe_allow_html=True)
                        st.success("‚úÖ Analysis Complete!")

                        # Classification Results
                        st.subheader("üéØ Classification Results")
                        col_a, col_b, col_c = st.columns(3)
                        with col_a:
                            st.markdown(f'<div class="waste-category">**Category:** {waste_type.title()}</div>',
                                      unsafe_allow_html=True)
                        with col_b:
                            st.metric("Sustainability Score", f"{recommendations['sustainability_score']}/10")
                        with col_c:
                            st.metric("Items Processed", quantity)

                        # AI Analysis Results
                        if analysis_detail in ["Detailed", "Expert"]:
                            st.subheader("ü§ñ AI Analysis")
                            with st.expander("View Detailed AI Analysis", expanded=True):
                                st.write(ai_analysis)

                        # Recycling Recommendations
                        st.subheader("‚ôªÔ∏è Recycling Action Plan")
                        rec = recommendations

                        st.markdown(f"**üîß Recommended Method:** {rec['method']}")

                        st.markdown("**üìã Step-by-Step Instructions:**")
                        for i, step in enumerate(rec['steps'], 1):
                            st.markdown(f"**{i}.** {step}")

                        st.info(f"**üåç Environmental Impact:** {rec['impact']}")

                        # Environmental Impact
                        if show_impact:
                            st.subheader("üå± Environmental Impact")
                            impact_col1, impact_col2, impact_col3 = st.columns(3)

                            with impact_col1:
                                st.metric("CO‚ÇÇ Saved", f"{impact['co2_saved']:.1f} kg", help="Carbon footprint reduction")
                            with impact_col2:
                                st.metric("Water Saved", f"{impact['water_saved']:.0f} L", help="Water conservation")
                            with impact_col3:
                                st.metric("Energy Saved", f"{impact['energy_saved']:.0f} kWh", help="Energy conservation")

                        st.markdown('</div>', unsafe_allow_html=True)

                        # Success message
                        st.balloons()
                        st.success(f"üéâ Successfully analyzed {quantity} {waste_type} item(s)!")

                else:
                    st.warning("‚ö†Ô∏è Please provide either a description or upload an image to analyze.")

        with col2:
            # Quick Reference Guide
            st.subheader("üìö Quick Reference")

            st.markdown("**üóÇÔ∏è Waste Categories:**")

            categories = {
                "ü•¨ Organic": {
                    "desc": "Food scraps, yard waste, biodegradable materials",
                    "examples": "Apple cores, coffee grounds, leaves"
                },
                "‚ôªÔ∏è Recyclable": {
                    "desc": "Plastic, glass, metal, paper materials",
                    "examples": "Bottles, cans, newspapers"
                },
                "üì± Electronic": {
                    "desc": "Electronic devices and components",
                    "examples": "Phones, batteries, computers"
                },
                "‚ö†Ô∏è Hazardous": {
                    "desc": "Chemical and toxic materials",
                    "examples": "Paint, medicines, pesticides"
                },
                "üëï Textile": {
                    "desc": "Clothing and fabric materials",
                    "examples": "Shirts, shoes, curtains"
                }
            }

            for cat, info in categories.items():
                with st.expander(cat):
                    st.write(f"**Description:** {info['desc']}")
                    st.write(f"**Examples:** {info['examples']}")

            # Tips section
            st.subheader("üí° Pro Tips")
            tips = [
                "Clean containers before recycling",
                "Remove labels when possible",
                "Check local recycling guidelines",
                "Consider donation before disposal",
                "Use reusable alternatives"
            ]

            for tip in tips:
                st.markdown(f"‚Ä¢ {tip}")

    with tab2:
        st.header("üìà Environmental Impact Dashboard")

        # Session Statistics
        col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown(f"""
            <div class="metric-card">
                <h3>üìä Items Analyzed</h3>
                <h1>{st.session_state.items_analyzed}</h1>
            </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
            <div class="metric-card">
                <h3>üåç CO‚ÇÇ Saved</h3>
                <h1>{st.session_state.co2_saved:.1f} kg</h1>
            </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
            <div class="metric-card">
                <h3>üíß Water Saved</h3>
                <h1>{st.session_state.water_saved:.0f} L</h1>
            </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown(f"""
            <div class="metric-card">
                <h3>‚ö° Energy Saved</h3>
                <h1>{st.session_state.energy_saved:.0f} kWh</h1>
            </div>
        """, unsafe_allow_html=True)

        # Sample analytics charts
        st.subheader("üìä Waste Distribution Analysis")

        # Demo data for visualization
        if st.session_state.items_analyzed > 0:
            st.info("üìà Real analytics will show here based on your analyzed items!")
        else:
            st.info("üîç Analyze some waste items to see your personal impact dashboard!")

        # Sample chart data
        chart_data = {
            'Organic': 35,
            'Recyclable': 40,
            'Electronic': 10,
            'Hazardous': 5,
            'Textile': 10
        }

        st.bar_chart(chart_data)

        # Weekly progress
        st.subheader("üìÖ Weekly Progress")
        import random
        weekly_data = {
            'Day': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
            'Items': [random.randint(3, 15) for _ in range(7)]
        }
        st.line_chart(weekly_data, x='Day', y='Items')

    with tab3:
        st.header("üå± Sustainability Impact Tracker")

        st.subheader("üèÜ Your Environmental Achievements")

        # Achievement badges based on session data
        achievements = []

        if st.session_state.items_analyzed >= 1:
            achievements.append("ü•â First Analysis - You've started your sustainability journey!")
        if st.session_state.items_analyzed >= 5:
            achievements.append("ü•à Eco Warrior - 5+ items analyzed!")
        if st.session_state.items_analyzed >= 10:
            achievements.append("ü•á Sustainability Champion - 10+ items analyzed!")
        if st.session_state.co2_saved >= 10:
            achievements.append("üåç Climate Helper - Saved 10+ kg CO‚ÇÇ!")

        if achievements:
            for achievement in achievements:
                st.success(achievement)
        else:
            st.info("üå± Start analyzing waste items to unlock achievements!")

        # Detailed impact breakdown
        st.subheader("üîç Detailed Impact Analysis")

        impact_data = [
            {
                "metric": "üå≥ Trees Saved Equivalent",
                "value": f"{st.session_state.co2_saved / 22:.1f}",
                "unit": "trees",
                "description": "Based on CO‚ÇÇ absorption capacity"
            },
            {
                "metric": "üöó Car Miles Offset",
                "value": f"{st.session_state.co2_saved * 2.31:.0f}",
                "unit": "miles",
                "description": "Equivalent driving distance offset"
            },
            {
                "metric": "üí° Light Bulb Hours",
                "value": f"{st.session_state.energy_saved * 100:.0f}",
                "unit": "hours",
                "description": "LED bulb operating time equivalent"
            },
            {
                "metric": "üöø Shower Time Saved",
                "value": f"{st.session_state.water_saved / 17:.0f}",
                "unit": "minutes",
                "description": "Average shower water usage equivalent"
            }
        ]

        for item in impact_data:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"**{item['metric']}**")
                st.caption(item['description'])
            with col2:
                st.metric("", f"{item['value']} {item['unit']}")

        # Goals section
        st.subheader("üéØ Sustainability Goals")

        goals = {
            "Weekly Analysis Target": {"current": st.session_state.items_analyzed, "target": 20},
            "CO‚ÇÇ Reduction Goal": {"current": st.session_state.co2_saved, "target": 50.0},
            "Water Conservation Goal": {"current": st.session_state.water_saved, "target": 1000.0}
        }

        for goal_name, data in goals.items():
            progress = min(data["current"] / data["target"], 1.0)
            st.markdown(f"**{goal_name}**")
            st.progress(progress)
            st.caption(f"{data['current']:.1f} / {data['target']:.1f} ({progress*100:.1f}% complete)")

    with tab4:
        st.header("üìö Sustainability Education Hub")

        st.subheader("üéì Learn About Waste Management")

        # Educational topics
        topics = [
            {
                "title": "üîÑ The 5 R's of Waste Management",
                "content": """
                **The hierarchy of waste management:**

                1. **REFUSE** - Don't accept what you don't need
                2. **REDUCE** - Minimize consumption and waste generation
                3. **REUSE** - Find new purposes for items before discarding
                4. **RECYCLE** - Process materials into new products
                5. **ROT** - Compost organic materials naturally

                This hierarchy prioritizes waste prevention over waste management.
                """,
                "level": "Beginner"
            },
            {
                "title": "üîÑ Circular Economy Principles",
                "content": """
                **Moving from linear to circular systems:**

                - **Linear Economy**: Take ‚Üí Make ‚Üí Dispose
                - **Circular Economy**: Reduce ‚Üí Reuse ‚Üí Recycle ‚Üí Regenerate

                Key principles:
                - Design out waste and pollution
                - Keep products and materials in use
                - Regenerate natural systems
                - Use renewable energy sources
                """,
                "level": "Intermediate"
            },
            {
                "title": "ü§ñ AI in Waste Management",
                "content": """
                **How artificial intelligence transforms waste management:**

                - **Smart Sorting**: Computer vision identifies waste types
                - **Predictive Analytics**: Forecast waste generation patterns
                - **Route Optimization**: Efficient collection schedules
                - **Quality Control**: Monitor recycling contamination
                - **Consumer Education**: Personalized sustainability insights

                AI can improve recycling rates by up to 50%!
                """,
                "level": "Advanced"
            },
            {
                "title": "üåç Global Waste Crisis",
                "content": """
                **Understanding the scale of the problem:**

                - **2 billion tons** of waste generated globally per year
                - Only **33%** is properly managed
                - **91%** of plastic is never recycled
                - Waste generation will increase **70%** by 2050

                **Solutions needed:**
                - Better infrastructure in developing countries
                - Extended producer responsibility
                - Consumer behavior change
                - Technology innovation
                """,
                "level": "Intermediate"
            }
        ]

        # Display topics with expandable sections
        for topic in topics:
            with st.expander(f"{topic['title']} [{topic['level']}]"):
                st.markdown(topic['content'])

                # Interactive elements
                col1, col2 = st.columns(2)
                with col1:
                    if st.button(f"üìñ Learn More", key=f"learn_{topic['title']}"):
                        st.info("Visit our extended learning resources for deeper insights!")
                with col2:
                    if st.button(f"üìù Take Quiz", key=f"quiz_{topic['title']}"):
                        st.info("Quiz feature coming soon!")

        # Quick tips section
        st.subheader("üí° Daily Sustainability Tips")

        daily_tips = [
            "ü•§ Use a reusable water bottle instead of single-use plastic",
            "üõçÔ∏è Bring your own bags when shopping",
            "üì¶ Choose products with minimal packaging",
            "üîã Properly dispose of batteries at collection points",
            "üçÉ Start a small compost bin for kitchen scraps",
            "üì± Donate or recycle old electronics instead of throwing away",
            "üß¥ Refill containers when possible instead of buying new ones",
            "üì∞ Go digital with bills and newspapers to reduce paper waste"
        ]

        # Display random tip of the day
        import random
        tip_of_day = random.choice(daily_tips)
        st.info(f"**üí° Tip of the Day:** {tip_of_day}")

        # Additional resources
        st.subheader("üîó Additional Resources")

        resources = [
            {"name": "EPA Waste Reduction Guide", "url": "https://www.epa.gov/recycle", "type": "Government"},
            {"name": "Ellen MacArthur Foundation", "url": "https://ellenmacarthurfoundation.org", "type": "Research"},
            {"name": "Zero Waste International Alliance", "url": "https://zwia.org", "type": "Organization"},
            {"name": "Plastic Free July", "url": "https://www.plasticfreejuly.org", "type": "Campaign"}
        ]

        for resource in resources:
            st.markdown(f"- **{resource['name']}** ({resource['type']}) - Learn more about sustainable practices")

if __name__ == "__main__":
    main()
'''

# Write the application to a file
with open('cleantech_app.py', 'w', encoding='utf-8') as f:
    f.write(app_code)

print("‚úÖ CleanTech application file created successfully!")
print("üìÑ File saved as: cleantech_app.py")

# Cell 4: Setup Ngrok (Required for public access)
print("üîê Setting up Ngrok for public access...")

# You need to get your auth token from: https://dashboard.ngrok.com/get-started/your-authtoken
# Replace 'YOUR_NGROK_TOKEN' with your actual token

NGROK_TOKEN = "2yzsh1mx1vDUbmfxD0T4SGkFsWT_65cA2J1xFsHH5Sr9rFJW"  # ‚ö†Ô∏è REPLACE THIS WITH YOUR ACTUAL TOKEN

if NGROK_TOKEN == "YOUR_NGROK_TOKEN":
    print("‚ö†Ô∏è  IMPORTANT: You need to:")
    print("1. Go to https://dashboard.ngrok.com/get-started/your-authtoken")
    print("2. Sign up/login to ngrok")
    print("3. Copy your authtoken")
    print("4. Replace 'YOUR_NGROK_TOKEN' above with your actual token")
    print("5. Run this cell again")
else:
    # Set the auth token
    ngrok.set_auth_token(NGROK_TOKEN)
    print("‚úÖ Ngrok authentication setup complete!")
    print("üöÄ Ready to launch the application!")

# Cell 5: Launch CleanTech Application
print("üöÄ Launching CleanTech Waste Management Application...")

import threading
import time

def run_streamlit():
    """Run Streamlit server in background"""
    import subprocess
    subprocess.run([
        "streamlit", "run", "cleantech_app.py",
        "--server.port", "8501",
        "--server.address", "0.0.0.0",
        "--server.headless", "true"
    ])

# Start Streamlit in a separate thread
print("üîÑ Starting Streamlit server...")
streamlit_thread = threading.Thread(target=run_streamlit, daemon=True)
streamlit_thread.start()

# Wait for server to start
print("‚è≥ Waiting for server to initialize...")
time.sleep(10)

# Create public tunnel
print("üåê Creating public tunnel...")
try:
    public_url = ngrok.connect(8501)
    print("üéâ SUCCESS! Your CleanTech app is now live!")
    print("=" * 50)
    print(f"üîó PUBLIC URL: {public_url}")
    print("=" * 50)
    print("üì± You can now:")
    print("1. Click the URL above to access your app")
    print("2. Share this URL with others")
    print("3. Use the app from any device")
    print("4. The app will stay active while this Colab session runs")
    print()
    print("‚ö†Ô∏è  Keep this Colab session running to maintain access")

except Exception as e:
    print(f"‚ùå Error creating tunnel: {e}")
    print("üí° Make sure you set up your ngrok token in Cell 4")

# Cell 6: Monitor Application Status
print("üìä CleanTech Application Status Monitor")
print("=" * 40)

# Check if tunnel is active
try:
    tunnels = ngrok.get_tunnels()
    if tunnels:
        for tunnel in tunnels:
            print(f"‚úÖ Active Tunnel: {tunnel.public_url}")
            print(f"üìç Local Address: {tunnel.config['addr']}")
            print(f"üîó Protocol: {tunnel.proto}")
    else:
        print("‚ùå No active tunnels found")
except:
    print("‚ö†Ô∏è  Cannot check tunnel status")

print("\nüîÑ To restart the application:")
print("1. Stop this cell (Runtime ‚Üí Interrupt execution)")
print("2. Re-run Cell 5")

print("\nüì± App Features Available:")
print("‚Ä¢ üîç AI-powered waste analysis")
print("‚Ä¢ üìä Environmental impact tracking")
print("‚Ä¢ üå± Sustainability education")
print("‚Ä¢ üìà Personal analytics dashboard")

# Keep monitoring (optional - run this to keep session active)
print("\n‚è∞ Keeping session active... (Press stop to end)")
try:
    while True:
        time.sleep(30)
        print("üíö App running...", end="\r")
except KeyboardInterrupt:
    print("\nüõë Monitoring stopped")